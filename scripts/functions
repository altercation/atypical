:<< \
-----------------------------------------------------------------------
HELPER FUNCTIONS
-----------------------------------------------------------------------

# pacman/aur

AUR_INSTALL () {
	PKG=$1; CURDIR="$(pwd)"
	TMPDIR=/tmp; [ -d $TMPDIR ] || mkdir $TMPDIR; cd $TMPDIR
        [ -z ${UPDATED:-} ] && pacman --noconfirm -Sy && typeset -g UPDATED=true
	rm -rf ${PKG}* || true
	curl -O https://aur.archlinux.org/packages/${PKG:0:2}/${PKG}/${PKG}.tar.gz
	tar -xzvf ${PKG}.tar.gz
	cd ${PKG}
	makepkg --noconfirm --syncdeps --clean --needed --install
	cd $TMPDIR
	rm -rf ${PKG}* || true
	cd "$CURDIR"
	}

INSTALL () {
    if ! which pacaur; then
        sudo pacman -Sy
        AUR_INSTALL cower
        AUR_INSTALL pacaur
    fi
    [ -n $@ ] && pacaur --noconfirm --noedit -S $@;
}

debugActive () {
[[ "${(L)DEBUG:-false}" == "true" ]] && return 0 | return 1
}

# System

detectMemory () {
    print "$(( $(print ${$(cat /proc/meminfo | grep -i memtotal)[2]}) / 1000000 ))G"
}

# General

notifySection () { print "\n\n$@\n\n"; }
notify () { print "\n$@\n"; }

conformToArray () {
# takes a global variable NAME as an argument, ensures that it is an
# array, not a simple list (doesn't damage existing arrays)
eval "$1=($(print ${(P)1}))"
}

enableServices () {
for servicename in $@; do
    systemctl enable $servicename
done
}

removeFromArray() { eval $1=\("\${(@)$1:#$2}"\); }

addToCommaList () {
    local _var_name=$1
    typeset -g $_var_name
    local _var_content="${(P)1}"
    shift
    local _new_value
    for _new_value in $@; do
        _var_content="${_var_content%,}${_var_content:+,}${_new_value#,}"
    done
    typeset -g $_var_name="${_var_content%,}"
}

# Passphrase

setPassphrase() {
        returnvar=$1
        typeset -g $returnvar
	typeset passphrase="" confirmation=""
        prompt="${2:-passphrase}"
	while [[ -z "$passphrase" ]]; do
	    print -n " Enter $prompt   : "
	    read -rs passphrase
            print
	    print -n " Confirm $prompt : "
	    read -rs confirmation
            print
	    #print; read -rs "passphrase?Enter $prompt : "
	    #echo "\n\n"; read -rs "confirmation?Confirm $prompt    : "
	    #echo "\n\n"
	    if [[ "$passphrase" != "$confirmation" ]]; then
		print "\nInput does not match!"
		passphrase="" confirmation=""
	    fi
	done
	#print -rn "$passphrase"
        typeset -g $returnvar="$passphrase"
	unset passphrase confirmation
}

# Block Device Related

deviceHasMountpoint() { [[ -n "$(/usr/bin/lsblk -dno MOUNTPOINT $1)" ]]; }

deviceOrChildHasMountpoint() { [[ -n "$(/usr/bin/lsblk -no MOUNTPOINT $1)" ]] && return 0 || mount | grep $1; }

getFieldFromRecordInTable () {
	local _field_name=$1
	local _record_index=$2
	local _table_array_name=$3
	#_return_variable_name=$4
	#typeset -g $4
	#eval $_return_variable_name'="${(@)'$_table_array_name'[$_record_index,$_field_name]:-}"'
	eval 'print "${(@)'$_table_array_name'[$_record_index,$_field_name]:-}"'
	}

storageGetLuksAncestorIndex () {
    local _record_index=$1
    # check for parent
    [[ -n "$(storageGetFieldValue CHILD_OF $_record_index)" ]] || return 1
    # still here, must have a parent
    if [[ "${(L)$(storageGetParentField FSTYPE $_record_index)}" == "luks" ]]; then
        # parent is luks
        storageGetParentIndex $_record_index
        return 0
    else
        # parent not luks, recurse up to parent
        storageGetLuksAncestorIndex $(storageGetParentIndex $_record_index) || return $?
    fi
}

selectInstallTarget () {
assignToVarname=$1

# Create list of drives
# Remove mounted drives from list
typeset -a drives
drives=($(/usr/bin/lsblk --paths --nodeps --noheadings --output NAME))
print "FULL LIST OF DRIVES:"
print -l "$drives"
print
for drive in $drives; do deviceOrChildHasMountpoint $drive && removeFromArray drives $drive || :; done
print "----------"
print "LIST OF DRIVES WITH NO MOUNT:"
print -l "$drives"

# User selects drive for install
local CONFIRM=""
local SELECTED=""
while [[ ! $CONFIRM =~ [Yy] ]]; do

        # List drives
        echo "\n\n\nAvailable unmounted drives for installation:"
        echo "--------------------------------------------"
	for drive in $drives; do print "[$(( i += 1))] $drive ($(/usr/bin/lsblk -dno SIZE $drive))"; done

        # Pick drive or quit
	echo -n "\nPlease enter the number of the drive you wish to install to, or 'q' to quit: (1$((($i > 1)) && echo "-$i")/q) "
	while [[ -z $SELECTED || ! $SELECTED =~ [1-$i] && ! ${(L)SELECTED} == "q" ]]; do print -n "\b \b"; read -k 1 SELECTED || :; done # read returns an error code at EOF, so we ignore it
        if [[ $SELECTED == "q" ]]; then echo; exit; fi

        # Identify as SSD or standard
	echo -n "\nIs $drives[$SELECTED] an SSD? (y/N):"
        read -k SSD || :; [[ ${(L)SSD} == y ]] && SSD="" || unset SSD; echo

        # Summarize and confirm
	echo -n "\n\nYou have selected $drives[$SELECTED] for COMPLETE ERASURE, and identified it as ${SSD-NOT }an SSD. Enter'y' to continue or 'n' to make changes or 'q' to quit: (y/N/q) "
        read -k CONFIRM ||:; echo
        [[ ${(L)CONFIRM} == "q" ]] && exit || :

done

eval "$assignToVarname=$drives[$SELECTED]"
}


extractFieldNames () { typeset -ga $2; eval $2'=($(print ${(P)1[2]};))'; }
extractFieldValues () { typeset -ga $2; eval $2'=($(print ${(P)1[3,-2]};))'; }
calculateNumberOfRecords () {
local _num_field_values=${(P)#1}
local _num_field_names=${(P)#2}
local _num_records=$(( ${_num_field_values} / ${_num_field_names} ))
if (( ${_num_field_values} != (${_num_field_names} * $_num_records) )); then
    return 1
else
    typeset -g $3
    eval $3'=$_num_records'
    return 0
fi
}

parseTableToRecords () {
local _field_values_ref=$1; typeset -ag $_field_values_ref
local _field_names_ref=$2;  typeset -ag $_field_names_ref
local _num_records_ref=$3;  typeset -g $_num_records_ref
local _result_array_ref=$4; typeset -Ag $_result_array_ref
calculateNumberOfRecords $_field_values_ref \
                         $_field_names_ref \
                         $_num_records_ref || return 1
# assign to local arrays due to error resulting from taking
# a count of a dereferenced varaible e.g. ${(P)#_reference} was
# failing, though uncertain why as it works in other tests and
# test scripts.... TODO DEBUG
_field_names=(${(P)_field_names_ref})
_field_values=(${(P)_field_values_ref})
local _iteration=0
local _record_index
for _record_index in {1..${(P)_num_records_ref}}; do
    for _field_index in {1..${#_field_names}}; do
        _field_value="${_field_values[$((${#_field_names} \
                                           * $_iteration \
                                           + $_field_index))]}"
        if [[ ! "$_field_value" =~ [_-] ]]; then
            local _subscript="[${_record_index},${_field_names[$_field_index]}]"
            eval ${_result_array_ref}${_subscript}=\"$_field_value\"
        fi
    done
    _iteration=$(( $_iteration + 1 ))
done
}

lookupRecordByFieldValue () {
local _field_name=$1
local _field_value=$2
local _source_array_name=$3
#_return_value_name=$4
#typeset -g $_return_value_name
#eval $_return_value_name='${(S)${(MS)"${(kv)'$_source_array_name'[(I)*,$_field_name]}"%*[0-9],$_field_name\ $_field_value}%,$_field_name\ $_field_value}'
eval 'print ${(S)${(MS)"${(kv)'$_source_array_name'[(I)*,$_field_name]}"%*[0-9],$_field_name\ $_field_value}%,$_field_name\ $_field_value}'
}

dumpArray () {
# functionally equivalent to 'typeset arrayname',
# this function is more readable for testing output but use
# 'typeset -p arrayname' for actual output to scripts
    for arrayname
    do
        for key in ${(@kP)arrayname}
        do    
            eval 'print "$arrayname\[$key\]=${'$arrayname'[$key]:-}"'
        done
    done
}

:<< \
'NOTES--------------------------------'

list all associative array keys that start with "prefix":
print ${arrayname[(I)prefix*]}

list the values of the same results:
print ${(v)arrayname[(I)prefix*]}

search values in array for a pattern and return the key name:
print ${(k)arrayname[(r)searchpattern]}

same, return multiple results
${(k)arrayname[(R)pattern]}
e.g.
${(k)mayarray[(R)prefix*]}


NOTES--------------------------------

:<< \
-----------------------------------------------------------------------
STORAGE TABLE SPECIFIC HELPER FUNCTIONS
-----------------------------------------------------------------------

# these could be broken out into a script specific lib file, but i
# want to keep them separate from the state-independent functions
# - these are mostly state dependent (i.e. they depend on specific
# variable names)

#setActiveStorageRecord _record_index

storageGetRecordByLabel () {
    # e.g. storageGetRecordByLabel system
    lookupRecordByFieldValue LABEL "$1" STORAGE_RECORDS RETURN_VALUE
    print $RETURN_VALUE
    }

setActiveStorageRecordWithPrefix () {
# sets variables equivalent to _prefix_fieldname (converting FIELDNAME to
# lowercase) for each field name in the storage table (so PATH becomes 
# _prefix_path, etc.)
    local _record_index=$1
    local _parent_index=${$(storageGetParentIndex $_record_index):-0} || :
    local _prefix=$2
    local _var_list_name=${3:-${_prefix}_var_list}
    typeset -ag $_var_list_name
    #${_prefix}_var_names
    # following gets all currently set field names for this record
    _record_fields=(${STORAGE_RECORDS[(I)1,*]#1,})
    local _field_name
    for _field_name in $_record_fields; do
        _var_name="${_prefix}_${(L)_field_name}"
        typeset -g $_var_name
        eval $_var_list_name'=(${(P)_var_list_name} $_var_name)'
        eval $_var_name'="$(getFieldFromRecordInTable \
                               $_field_name \
                               $_record_index \
                               STORAGE_RECORDS)"'
    done
    # recursively set parent (and grandparents, etc. though they will
    # likely not be used)
    eval $_var_list_name'=(${(P)_var_list_name} ${_prefix}_parent_index)'
    typeset -g ${_prefix}_parent_index
    eval ${_prefix}_parent_index'=$_parent_index'
    if (( ${_parent_index:-} > 0 )); then
        setActiveStorageRecordWithPrefix $_parent_index \
                                         ${_prefix}_parent \
                                         $_var_list_name
    fi
    }

unsetActiveStorageRecordWithPrefix () {
    local _prefix=$1
    local _var_list_name=${_prefix}_var_list
    local _var_name
    for _var_name in ${(P)_var_list_name}; do unset $_var_name; done
    unset $_var_list_name
    }

storageGetParentIndex () {
    # eg storageGetParentIndex 2 - gets index of parent of record 2
    local _record_index=$1
    local _parent_label="$(getFieldFromRecordInTable CHILD_OF $_record_index STORAGE_RECORDS)"
    if [[ -n $_parent_label ]]; then
        lookupRecordByFieldValue LABEL "$_parent_label" STORAGE_RECORDS || return 1
    else
        print "0"
        return 1
    fi
}

storageGetParentField () {
    # eg storageGetParentField LABEL 2 - gets label of parent of record 2
    local _field_name=$1
    local _record_index=$2
    local _parent_index=$(storageGetParentIndex $_record_index) || return 1
    getFieldFromRecordInTable $_field_name $_record_index STORAGE_RECORDS
}

storageGeneratePartitioningCommandForDrive _storage_command () {
typeset -g $1
local _drive=$2
typeset -a _sgdisk_cmd
for _record_index in {1..$NUM_STORAGE_RECORDS}; do
    setActiveStorageRecordWithPrefix $_record_index _record
    if [[ -n ${_record_code:-} ]]; then 

        if [[ ${(L)_record_size} == "max" ]]; then
        # using maximum available space on drive for this partition
            local _new_cmd="--largest-new=$_record_device_index"
        else
        # using a specific size for the space on the drive
            local _new_cmd="--new=${_record_device_index}:0:+${_record_size}"
        fi

        if (( ${BOOTABLE_LABELS[(i)${(U)_record_label}]} <= ${#BOOTABLE_LABELS} ));
        then # this item has a bootable partition label
            local _attr_cmd="--attributes=${_record_device_index}:set:0"
        else # not a bootable partition
            local _attr_cmd="" 
        fi

        _sgdisk_cmd=( ${_sgdisk_cmd:-}
                      "$_new_cmd"
                      "--typecode=${_record_device_index}:${_record_code}"
                      "--change-name=${_record_device_index}:$_record_label"
                      "$_attr_cmd" )
    fi
    unsetActiveStorageRecordWithPrefix _record
done
_sgdisk_cmd=( sgdisk --zap-all "$_drive;"
              sgdisk --clear "$_drive;"
              sgdisk ${_sgdisk_cmd:-} "$_drive;")
eval $1'="$_sgdisk_cmd"'
}
