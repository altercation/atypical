#!/usr/bin/env zsh

typeset -r USAGE="
-------------------------------------------------------------------------------

atypical - A Typical Arch Linux Install Script

Author:

    Ethan Schoonover <es@ethanschoonover.com>

Usage:

    atypical manifest-filename
    atypical /full/absolute/path/to/manifest-filename
    atypical http://url/of/file/to/curl

Options:

    -d, --debug     Debug level 1: show extra command output
    -dd, --ddebug   Debug level 2: add verbose script execution option
    -ddd, --dddebug Debug level 3: add xtrace script execution option

Examples:

    atypical gnome_system
    atypical xmonad_laptop
    atypical /root/atypical/manifests/quick_modified_gnome_system
    atypical http://myserver.com/my_laptop_manifest

Related:

See manifest subdirectory for manifest file content details.

-------------------------------------------------------------------------------
"
:<< \
-------------------------------------------------------------------------------
Script Environment
-------------------------------------------------------------------------------
# script absolute path, name, and load of common script env, opts, functions
SCRIPT_NAME="${${SCRIPT_PATH:=$(readlink -f $0)}:t}"
SCRIPT_ROOT="${SCRIPT_PATH:h}"
FUNC_ROOT="${SCRIPT_ROOT}/functions"
for _fm in ${FUNC_ROOT}/environment/*; do source ${_fm}; done;

# root?
true && :"" <<< "Beginning $SCRIPT_NAME installer" \
# [[ "$(whoami)" == "root" ]] \
#     && :"" <<<"\nBeginning $SCRIPT_NAME installer" \
#     || errorLog "Must be root to run this install script."

:''<< \
-------------------------------------------------------------------------------
Setting up installer environment
-------------------------------------------------------------------------------
# initial declarations
typeset -Ax SCRIPT DIR FUNC CONFIG INSTALLER USER

# default value for new system install mount point, chroot
MOUNTROOT="/mnt"

# used only if we need to write out temporary storage table data
# such as from a remote url or direct manifest storage data
TMPSTOR=$TMPDIR/storage

:""<< \
-------------------------------------------------------------------------------
Loading & processing atypical manifest file
-------------------------------------------------------------------------------
# If the manifest file hasn't been specified as arg 1 on the command line, fail
[[ -n ${MANIFEST:=${1:-}} ]] \
    || { errorLog "No manifest specified." || usage 1; }

# source remote or create absolute filepath
if [[ "$MANIFEST" =~ "(http|ftp)s?:.*" ]]; then
    { curl -#L $MANIFEST -o $TMPDIR/manifest } ioLog \
    && { successLog "Retrieved remote manifest file.";
         MANIFEST="$TMPDIR/manifest"; } \
    || { errorLog "Failed to retrieve remote manifest. Check URL:" ||
         errorLog "$MANIFEST"; }
fi

# create absolute path
[[ "${MANIFEST:0:1}" == "/" ]] || MANIFEST="$SCRIPT_ROOT/manifests/$MANIFEST"

# confirm manifest exists, then source
[[ -f "$MANIFEST" ]] || errorLog "Could not find manifest at $MANIFEST."
{ source "$MANIFEST" } ioLog \
    || errorLog "Error while reading manifest: check formating and values."

# if custom root set, set a convenience variable
[[ -z "${CUSTOM_ROOT:-}" ]] || CUSTOM=true

# If the manifest contains a SCRIPT[CUSTOM]="http://repo.url/goes/here" style
# declaration, that url is used as a git repository "root". This is then
# cloned locally.
[[ ! "${CUSTOM_ROOT:-}" =~ "(https?|git):.*" ]] || {
        progressLog "Cloning custom script repository";
        { git clone --progress "${CUSTOM_ROOT:-}" "$TMPDIR/custom"; } ioLog \
        && { successLog "Done.";
             CUSTOM_ROOT="$TMPDIR/custom"; } \
        || { errorLog "Failed." }
    }

:""<< \
-------------------------------------------------------------------------------
Autoloading installer functions
-------------------------------------------------------------------------------
# autoload all functions, custom second so that it is first in line in fpath
for _root in $SCRIPT_ROOT ${CUSTOM_ROOT:-}; do
    fpath=($_root/{installers,functions,user} "${fpath[@]}")
    for _func in $_root/{installers,functions,user}/**~environment/*(.); do
        autoload ${_func:t}
    done
done
successLog "Loaded installer functions."

:""<< \
-------------------------------------------------------------------------------
Preparing storage
-------------------------------------------------------------------------------
# expects STORAGE as scalar value, either filename or actual table data
# check that we have something in the STORAGE value and if we do then
# convert to array for easy multiline check.
#
# init-storage must be passed a filename or url, so if we have read in actual
# table data, write it out to a temp file
#
# our only check here should be to determine if we have a multiline value which
# will be assumed is actual storage data. no sanitizing or validity checks are
# performed in this main script, only in init-storage (if they are implemented)

# is STORAGE set already by the manifest?
[[ -n "${STORAGE:-}" ]] \
    || errorLog "No storage table data / filename present in manifest."

# is it multiline? if so, write it out and set its new value to the temp file
(( $(wc -l <<< "${STORAGE}") > 1 )) && {
    print "$STORAGE" > $TMPSTOR \
        || errorLog "Failed writing temporary storage file to $TMPSTOR"
    STORAGE=$TMPSTOR
    }

init-storage "$STORAGE"

exit

:""<< \
-------------------------------------------------------------------------------
INSTALL BASE SYSTEM
-------------------------------------------------------------------------------

# including base-devel by default
pacstrap $MOUNT_ROOT base base-devel

# generate fstab
genfstab -L $MOUNT_ROOT > $MOUNT_ROOT/etc/fstab

:""<< \
-------------------------------------------------------------------------------
INSTALL BOOT LOADER??? NOT HERE?
-------------------------------------------------------------------------------
refind-install --root $MOUNT_ROOT
mv $MOUNT_ROOT/boot/EFI/refind $MOUNT_ROOT/boot/EFI/BOOT
mv $MOUNT_ROOT/boot/EFI/BOOT/refind_x86.efi $MOUNT_ROOT/boot/EFI/BOOT/bootx86.efi

:""<< \
-------------------------------------------------------------------------------
CREATE CHROOT SCRIPT; CHROOT, COMPLETION, CLEANUP
-------------------------------------------------------------------------------
# extract everything after this section with necessary variables prefixed

# initialize new script
CHROOT_SCRIPT_NAME="${SCRIPT_NAME}-chroot"
CHROOT_SCRIPT_PATH="$MOUNT_ROOT/$CHROOT_SCRIPT_NAME"
echo "#!/usr/bin/zsh" >> "$CHROOT_SCRIPT_PATH"

# dump required variables and arrays into new script
function {
for _param
do
    typeset -p $_param >> "$CHROOT_SCRIPT_PATH"
done
} INSTALL CONFIG MKFS_OPTIONS MOUNT_OPTIONS LUKS_OPTIONS STORAGE_RECORDS

# dump functions into script
cat ${SCRIPT_ROOT}/scripts/functions >> "$CHROOT_SCRIPT_PATH"

# dump remainder of file into chroot script
sed -n "/>\{10\}/,$ p" "$SCRIPT_PATH" >> "$CHROOT_SCRIPT_PATH"
chmod +x "$CHROOT_SCRIPT_PATH"

#DEBUG
print "CHECK CHROOT SCRIPT"
exit

# chroot
arch-chroot $MOUNT_ROOT "$CHROOT_SCRIPT_NAME"

# post chroot cleanup
rm $MOUNT_ROOT/$CHROOT_SCRIPT_NAME
umount -R $MOUNT_ROOT/boot; umount -R $MOUNT_ROOT; cryptsetup close crypt
echo "check mkinitcpio.conf, efi boot params, etc. and then reboot"; exit
#reboot

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>> CHROOT TRIM LINE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

:""<< \
-------------------------------------------------------------------------------
INSTALL OTHER BASIC SYSTEM-RELATED PACKAGES
-------------------------------------------------------------------------------

:""<< \
-------------------------------------------------------------------------------
SYSTEM CONFIG - LOCALE, TIME, HOSTNAME
-------------------------------------------------------------------------------
export LANG=${CONFIG[LOCALE-CONF]}
print "${CONFIG[LOCALE-GEN]}" >> /etc/locale.gen; locale-gen
print "${CONFIG[LOCALE-CONF]}" > /etc/locale.conf
print "FONT=${CONFIG[CONSOLEFONT]}" >> /etc/vconsole.conf
ln -s /usr/share/zoneinfo/${CONFIG[TIMEZONE]} /etc/localtime
hwclock --systohc --utc
print "${CONFIG[HOSTNAME]}" > /etc/hostname

:""<< \
-------------------------------------------------------------------------------
CLI
-------------------------------------------------------------------------------

:""<< \
-------------------------------------------------------------------------------
GUI
-------------------------------------------------------------------------------
INSTALL ${PACKAGES[VIDEO]:-}
INSTALL ${PACKAGES[GUI]:-}
enableServices ${SERVICES[GUI]:-}

:""<< \
-------------------------------------------------------------------------------
INITRAMFS
-------------------------------------------------------------------------------
# configure initramfs
FILE=/etc/mkinitcpio.conf

KEY=MODULES; VALUE="\"${CONFIG[INIT_MODULES]}\""
sed -i "s/\($KEY *= *\).*/\1$VALUE/" $FILE

# replace base and udev with systemd... confirm no sideffects?
#KEY=HOOKS; VALUE='"base udev autodetect modconf console keyboard block encrypt filesystems"'
#sed -i "s/\($KEY *= *\).*/\1$VALUE/" $FILE

mkinitcpio -p linux

:""<< \
-------------------------------------------------------------------------------
BOOTLOADER
-------------------------------------------------------------------------------

:""<< \
-------------------------------------------------------------------------------
PASSWORDS, NEW USER SETUP
-------------------------------------------------------------------------------

# root password
#passwd

# new user (only reason we needed to mount the new encrypted /home earlier)
useradd -m -g users -G wheel -s /bin/bash ${CONFIG[USERNAME]}

# TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!
#passwd es

# allow wheel
#visudo
cp /etc/sudoers.d /var/tmp/sudoers.new
echo "%wheel ALL=(ALL) NOPASSWD: ALL" > /var/tmp/sudoers.wheel
visudo -cf /var/tmp/sudoers.wheel && mv /var/tmp/sudoers.wheel /etc/sudoers.d/wheel || echo "ERROR updating sudoers; no change made"

:""<< \
-------------------------------------------------------------------------------
POST USER LOGIN INSTALLS
-------------------------------------------------------------------------------

:""<< \
-------------------------------------------------------------------------------
EXIT CHROOT FOR CLEANUP
-------------------------------------------------------------------------------
exit

# vim: set filetype=sh :
