#!/usr/bin/zsh

USAGE="$(cat << \
-------------------------------------------------------------------------------
atypical

part of Atypical - A Typical Arch Linux Install Script
Ethan Schoonover <es@ethanschoonover.com>

Usage:

atypical manifest-filename
atypical /full/absolute/path/to/manifest-filename
atypical http://url/of/file/to/curl

Examples:

atypical es_thinkpad_x220 # for a specific user, laptop
atypical /root/atypical/manifests/es_thinkpad_x220
atypical http://myserver.com/manifest

(see manifest subdirectory for manifest file content details)
-------------------------------------------------------------------------------
)"

:<< \
-------------------------------------------------------------------------------
FRONTMATTER
-------------------------------------------------------------------------------
# -d, --debug, -dd --debug
[[ ${1:-} == *-dd* ]] && DDEBUG=true
[[ ${1:-} == *-d* ]]  &&  DEBUG=true && shift

setopt ERR_RETURN NO_UNSET GLOBAL_EXPORT EXTENDED_GLOB \
       ${DEBUG:+VERBOSE} ${DDEBUG:+XTRACE}

:<< \
-------------------------------------------------------------------------------
LOGGING FUNCTIONS

Includes a little hack to allow semantic comments which write to the teeLog
which, if this hack is not present, do not break the script. Additionally the
alias does not damage the builtin : by using the '' suffix to limit scope to
an otherwise unused name. Being global, autoloaded scripts can use the same
format without or can be called directly from the command line without the
alias defined here and still function as expected.
-------------------------------------------------------------------------------
_Log () { x=$1; p="$2"; s="$3"; shift 3;
          m=("${@:-$(while read line; do print $line; done)}");
          print -- "$p${(@F)m:-}$s" >> "$LOGFILE" | cat; return $x }

alias -g teeLog='_Log 0 "" ""'
alias -g  :\'\'='_Log 0 "" ""'

alias -g hedLog='_Log 0 "\n$__\n" "\n$__\n"'
alias -g  :\"\"='_Log 0 "\n$__\n" "\n$__\n"'

alias -g errLog='_Log 1 "\n$___\nERROR!\n$__\n" "\n$___"'

:<< \
-------------------------------------------------------------------------------
INITIAL DECLARATIONS & HOUSEKEEPING FUNCTIONS
-------------------------------------------------------------------------------
typeset -Ax SCRIPT SOURCE DATA MANIFEST CONFIG INSTALLER USER
typeset -ax STORAGE MODULES BOOTOPTS 

SCRIPT[NAME]="${${_PATH:=$(readlink -f "$0")}:t}" SCRIPT[ROOT]="${_PATH:h}"

MOUNTROOT="/mnt" __=${__:=${(r:80::--:):-}}; ___=${__//?/=}
TMPDIR="$(mktemp -d "/tmp/${SCRIPT[NAME]}-XXXXXX")"
LOGFILE="/tmp/atypical.log"; rm /tmp/atypical.log &>/dev/null || true

TRAPEXIT () { [[ -d "$TMPDIR" ]] && rm -rf "$TMPDIR"; }
TRAPERR  () { teeLog "\nERROR - see log file: ${LOGFILE}\n"; exit 1; }
exitWith () { print "$@"; exit 0; }; failWith () { print "$@"; exit 1; }

autoInit () { for _load_path; do fpath=("$_load_path" "${fpath[@]}");
for _func in ${_load_path}/**/*(#q.); do autoload ${_func:t}; done; done; }
SOURCE[MANIFESTS]="${SCRIPT[ROOT]}/manifests"
SOURCE[STORAGE]="${SCRIPT[ROOT]}/storage"
SOURCE[INSTALLERS]="${SCRIPT[ROOT]}/installers"
SOURCE[FUNCTIONS]="${SCRIPT[ROOT]}/functions"
SOURCE[USER]="${SCRIPT[ROOT]}/user"
autoInit "${SOURCE[INSTALLERS]}" "${SOURCE[FUNCTIONS]}" "${SOURCE[USER]}"

:""<< \
-------------------------------------------------------------------------------
LOADING & PROCESSING ATYPICAL MANIFEST
-------------------------------------------------------------------------------

[[ -n ${MANIFEST[FILE]:=${1:-}} ]] || exitWith "\n$__\n$USAGE\n$__\n"

sourceFile "${MANIFEST[FILE]}" "${SCRIPT[ROOT]}/manifests" \
    && teeLog <<< "Loaded manifest successfully..." \
    || errLog <<< "Failure loading manifest..."

exit

if [[ -n "${MANIFEST[ROOT]:-}" ]]
then
    if SCRIPT[CUSTOM_ROOT]="$(addScriptsRoot "${MANIFEST[ROOT]}")"; then
        FUNCTIONS[CUSTOM_SCRIPTS_PATH]="${SCRIPT[CUSTOM_ROOT]}/scripts"
        FUNCTIONS[CUSTOM_INSTALLERS_PATH]="${SCRIPT[CUSTOM_ROOT]}/installers"
        FUNCTIONS[CUSTOM_USER_PATH]="${SCRIPT[CUSTOM_ROOT]}/scripts"
        autoInit $FUNCTIONS
    else
        errLog "Failed to source/set new scripts root as listed in manifest."
    fi
fi

:""<< \
-------------------------------------------------------------------------------
PREPARING STORAGE
-------------------------------------------------------------------------------

exit
xxx
at this point we might have either the full storage table data or a filename...
atypical-storage "${CONFIG[STORAGE]}"

:""<< \
-------------------------------------------------------------------------------
INSTALL BASE SYSTEM
-------------------------------------------------------------------------------

# including base-devel by default
pacstrap $MOUNT_ROOT base base-devel

# generate fstab
genfstab -L $MOUNT_ROOT > $MOUNT_ROOT/etc/fstab

:""<< \
-------------------------------------------------------------------------------
INSTALL BOOT LOADER??? NOT HERE?
-------------------------------------------------------------------------------
refind-install --root $MOUNT_ROOT
mv $MOUNT_ROOT/boot/EFI/refind $MOUNT_ROOT/boot/EFI/BOOT
mv $MOUNT_ROOT/boot/EFI/BOOT/refind_x86.efi $MOUNT_ROOT/boot/EFI/BOOT/bootx86.efi

:""<< \
-------------------------------------------------------------------------------
CREATE CHROOT SCRIPT; CHROOT, COMPLETION, CLEANUP
-------------------------------------------------------------------------------
# extract everything after this section with necessary variables prefixed

# initialize new script
CHROOT_SCRIPT_NAME=atypical-chroot
CHROOT_SCRIPT_PATH="$MOUNT_ROOT/$CHROOT_SCRIPT_NAME"
echo "#!/usr/bin/zsh" >> "$CHROOT_SCRIPT_PATH"

# dump required variables and arrays into new script
function {
for _param
do
    typeset -p $_param >> "$CHROOT_SCRIPT_PATH"
done
} INSTALL CONFIG MKFS_OPTIONS MOUNT_OPTIONS LUKS_OPTIONS STORAGE_RECORDS

# dump functions into script
cat ${SCRIPT_PATH}/scripts/functions >> "$CHROOT_SCRIPT_PATH"

# dump remainder of file into chroot script
sed -n "/>\{10\}/,$ p" "$SCRIPT_PATH" >> "$CHROOT_SCRIPT_PATH"
chmod +x "$CHROOT_SCRIPT_PATH"

#DEBUG
print "CHECK CHROOT SCRIPT"
exit

# chroot
arch-chroot $MOUNT_ROOT "$CHROOT_SCRIPT_NAME"

# post chroot cleanup
rm $MOUNT_ROOT/$CHROOT_SCRIPT_NAME
umount -R $MOUNT_ROOT/boot; umount -R $MOUNT_ROOT; cryptsetup close crypt
echo "check mkinitcpio.conf, efi boot params, etc. and then reboot"; exit
#reboot

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>> CHROOT TRIM LINE <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

:""<< \
-------------------------------------------------------------------------------
INSTALL OTHER BASIC SYSTEM-RELATED PACKAGES
-------------------------------------------------------------------------------

:""<< \
-------------------------------------------------------------------------------
SYSTEM CONFIG - LOCALE, TIME, HOSTNAME
-------------------------------------------------------------------------------
export LANG=${CONFIG[LOCALE-CONF]}
print "${CONFIG[LOCALE-GEN]}" >> /etc/locale.gen; locale-gen
print "${CONFIG[LOCALE-CONF]}" > /etc/locale.conf
print "FONT=${CONFIG[CONSOLEFONT]}" >> /etc/vconsole.conf
ln -s /usr/share/zoneinfo/${CONFIG[TIMEZONE]} /etc/localtime
hwclock --systohc --utc
print "${CONFIG[HOSTNAME]}" > /etc/hostname

:""<< \
-------------------------------------------------------------------------------
CLI
-------------------------------------------------------------------------------

:""<< \
-------------------------------------------------------------------------------
GUI
-------------------------------------------------------------------------------
INSTALL ${PACKAGES[VIDEO]:-}
INSTALL ${PACKAGES[GUI]:-}
enableServices ${SERVICES[GUI]:-}

:""<< \
-------------------------------------------------------------------------------
INITRAMFS
-------------------------------------------------------------------------------
# configure initramfs
FILE=/etc/mkinitcpio.conf

KEY=MODULES; VALUE="\"${CONFIG[INIT_MODULES]}\""
sed -i "s/\($KEY *= *\).*/\1$VALUE/" $FILE

# replace base and udev with systemd... confirm no sideffects?
#KEY=HOOKS; VALUE='"base udev autodetect modconf console keyboard block encrypt filesystems"'
#sed -i "s/\($KEY *= *\).*/\1$VALUE/" $FILE

mkinitcpio -p linux

:""<< \
-------------------------------------------------------------------------------
BOOTLOADER
-------------------------------------------------------------------------------

:""<< \
-------------------------------------------------------------------------------
PASSWORDS, NEW USER SETUP
-------------------------------------------------------------------------------

# root password
#passwd

# new user (only reason we needed to mount the new encrypted /home earlier)
useradd -m -g users -G wheel -s /bin/bash ${CONFIG[USERNAME]}

# TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!
#passwd es

# allow wheel
#visudo
cp /etc/sudoers.d /var/tmp/sudoers.new
echo "%wheel ALL=(ALL) NOPASSWD: ALL" > /var/tmp/sudoers.wheel
visudo -cf /var/tmp/sudoers.wheel && mv /var/tmp/sudoers.wheel /etc/sudoers.d/wheel || echo "ERROR updating sudoers; no change made"

:""<< \
-------------------------------------------------------------------------------
POST USER LOGIN INSTALLS
-------------------------------------------------------------------------------

:""<< \
-------------------------------------------------------------------------------
EXIT CHROOT FOR CLEANUP
-------------------------------------------------------------------------------
exit
